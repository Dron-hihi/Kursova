#include <iostream>
#include<windows.h>
#include <time.h>
#include <iomanip>
#include <string>
#include <conio.h>
#include <fstream>

using namespace std;
int const size_1 = 20;
int const size_2 = 70;
int level = 0;
int Best = 0;
int cc = 50;
char pole[size_1][size_2];
int j_position = size_2 - 2, j_position1 = size_2 - 2;
bool Stop = true;
const int Color_fon = system("color F0");
void fin();


//***********************************************
//************* Прижок спортсмена ***************
//***********************************************
void man_jump()
{
	pole[17 - 4][5] = '*';
	pole[16 - 4][5] = '*';
	pole[15 - 4][5] = '*';
	pole[17 - 4][7] = '*';
	pole[16 - 4][7] = '*';
	pole[15 - 4][7] = '*';
	pole[14 - 4][5] = '*';
	pole[14 - 4][6] = '*';
	pole[14 - 4][7] = '*';
	pole[13 - 4][5] = '*';
	pole[13 - 4][6] = '*';
	pole[13 - 4][7] = '*';
	pole[12 - 4][5] = '*';
	pole[12 - 4][6] = '*';
	pole[12 - 4][7] = '*';
	pole[11 - 4][6] = '*';
	pole[10 - 4][6] = '0';
	pole[12 - 4][4] = '*';
	pole[12 - 4][8] = '*';
	pole[13 - 4][3] = '*';
	pole[13 - 4][9] = '*';
	pole[14 - 4][3] = '*';
	pole[14 - 4][9] = '*';

	for (int i = 0; i < size_2; i++)
	{
		pole[19][i] = '~';
		pole[18][i] = '~';
	}
}


//***********************************************
//******** Вивід ігрової зони (масиву) **********
//***********************************************
void viv()
{
	for (int i = 0; i < size_1; i++)
	{
		for (int j = 0; j < size_2; j++)
		{
			cout << pole[i][j];
		}
		cout << endl;
	}
	level++;
	cout << "Score = " << level << endl;
}


//***********************************************
//******* Очистка ігрової зони (масиву) *********
//***********************************************
void clear()
{
	for (int i = 0; i < size_1; i++)
	{
		for (int j = 0; j < size_2; j++)
		{
			pole[i][j] = ' ';
		}
	}
}


//***********************************************
//******* Створення спортсмена (масиву) *********
//***********************************************
void man_default_fill(bool isJump)
{
	clear();
	if (isJump == false)
	{
		pole[17][5] = '*';
		pole[16][5] = '*';
		pole[15][5] = '*';
		pole[17][7] = '*';
		pole[16][7] = '*';
		pole[15][7] = '*';
		pole[14][5] = '*';
		pole[14][6] = '*';
		pole[14][7] = '*';
		pole[13][5] = '*';
		pole[13][6] = '*';
		pole[13][7] = '*';
		pole[12][5] = '*';
		pole[12][6] = '*';
		pole[12][7] = '*';
		pole[11][6] = '*';
		pole[10][6] = '0';
		pole[12][4] = '*';
		pole[12][8] = '*';
		pole[13][3] = '*';
		pole[13][9] = '*';
		pole[14][3] = '*';
		pole[14][9] = '*';

		for (int i = 0; i < size_2; i++)
		{
			pole[19][i] = '~';
			pole[18][i] = '~';
		}
	}
	else
	{
		man_jump();
	}
}


//***********************************************
//******** Створення перешкоди (масиву) *********
//***********************************************
void danger_fill(int j_position, int &danger_size)
{
	int i_end = size_1;

	if (danger_size==0)
	{
		danger_size = 2+rand() % 2;
	}

	for (int i = 0; i < danger_size; i++)
	{
		pole[i_end - 2 - i][j_position] = '|';
		if (pole[i_end - 2 - i][j_position - 1] == '*')
		{
			fin();
		}
	}
}


//***********************************************
//******** Видалення перешкоди (масиву) *********
//***********************************************
void danger_delete(int j_position, int &danger_size)
{
	int i_end = size_1;

	for (int i = 0; i < danger_size; i++)
	{
		pole[i_end - 2 - i][j_position] = ' ';
	}
}


//***********************************************
//***************** Меню старт ******************
//***********************************************
void start()
{
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "******************  $$$$  $$$$$    $    $$$$   $$$$$ *****************" << endl;
	cout << "****************** $        $     $ $   $   $    $   *****************" << endl;
	cout << "******************  $$$     $    $   $  $$$$$    $   *****************" << endl;
	cout << "******************     $    $    $$$$$  $  $     $   *****************" << endl;
	cout << "****************** $$$$     $    $   $  $   $    $   *****************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "******* Для прижка нажимай кавiшу <G> на англомовнiй розкладцi *******" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "******* Чим бiльше перепригнутих бар'єрiв тим бiльший рeкорд!! *******" << endl;
	cout << "**********************************************************************" << endl;
	cout << "*********************** Для старту жми ENTER *************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
}


//***********************************************
//***************** Меню фініш ******************
//***********************************************
void fin()
{
	if (level > Best)
	{
		Best = level;
	}
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "****************** $$$$$  $  $   $  $   $$$$  $   $ ******************" << endl;
	cout << "****************** $      $  $$  $  $  $      $   $ ******************" << endl;
	cout << "****************** $$$$   $  $ $ $  $   $$$   $$$$$ ******************" << endl;
	cout << "****************** $      $  $  $$  $      $  $   $ ******************" << endl;
	cout << "****************** $      $  $   $  $  $$$$   $   $ ******************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "************************* YOUR RESULT = " << setw(4) << level << " *************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "************************* BEST RESULT = " << setw(4) << Best << " *************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	cout << "**********************************************************************" << endl;
	Sleep(5000);
	ofstream File;
	File.open("Best_resault.txt", ios_base::app);
	File << Best << " - best resault.";
	File.close();
	ifstream fin;
	fin.open("Best_resault.txt");
	char ch;
	while (fin.get(ch))
	{
		cout << ch;
	}
	Sleep(500000);
	Stop = false;

}



int main()
{
	srand(time(0));
	setlocale(LC_ALL, "ru");
	int danger_size=0,danger_size1=0,count_jump=5;
	bool first_move = true, second_move = false,isJump=false;

	start();
	char start = _getch();
	if (start == 13)
	{
		if (Stop == true)
		{
			for (; ; )
			{
				if (_kbhit() && count_jump == 5)
				{
					char c = _getch();
					if (c == 'g')
					{
						isJump = true;
					}
				}

				if (count_jump == 0)
				{
					isJump = false;
					count_jump = 5;
				}
				man_default_fill(isJump);

				if (j_position == 0)
				{
					danger_size = 0;
					j_position = size_2 - 2;
					first_move = false;
				}
				if (j_position1 == 0)
				{
					danger_size1 = 0;
					j_position1 = size_2 - 2;
					second_move = false;
					first_move = true;
				}

				if (first_move == true)
				{
					danger_fill(j_position, danger_size);
				}

				if (j_position < size_2 - 30)
				{
					second_move = true;
				}

				if (second_move == true)
				{
					danger_fill(j_position1, danger_size1);
				}
				viv();
				if (level < 100)
				{
					cc = 35;
				}
				else if (level >= 100 && level < 200)
				{
					cc = 25;
				}
				else if (level >= 200 && level < 300)
				{
					cc = 15;
				}

				Sleep(30);

				if (first_move == true)
				{
					danger_delete(j_position, danger_size);
					j_position--;
				}

				if (second_move == true)
				{
					danger_delete(j_position1, danger_size1);
					j_position1--;
				}

				if (isJump == true)
				{
					count_jump--;
				}
				system("cls");
			}
			for (;;)
			{
				int jump;
				jump = _getch();
			}
		}
	}
	


	system("pause");
}